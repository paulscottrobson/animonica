# *************************************************************************
#
#								Base Harmonic Class
#
# *************************************************************************

import sys

class Harmonica:
	#
	#	Create the directory of available notes this instrument can play.
	#
	def createDirectory(self):
		self.noteDirectory = {}
		# slide open (0) closed (1)
		for slide in range(0,2):
			if slide == 0 or self.hasSlide():
				# first do the blow notes
				for hole in range(1,self.getHoleCount()+1):
					# blows. Not supporting top end blow bends here.
					note = self.getNote(hole,True,0,slide != 0)
					entry = { "hole":hole, "blow":True, "bend":0, "noteid":note,"slide":slide != 0  }
					self.noteDirectory[Harmonica.noteIDToName(note)] = entry
			# then do the draws in increasing amount of bendiness.
			for bend in range(0,4):
				for hole in range(1,self.getHoleCount()+1):
					# check it's actually possible.
					if self.canBend(hole) >= bend:
						note = self.getNote(hole,False,bend,slide != 0)
						name = Harmonica.noteIDToName(note)
						if name not in self.noteDirectory:
							entry = { "hole":hole,"blow":False,"bend":bend,"noteid":note,"slide":slide != 0 }
							self.noteDirectory[name] = entry
							#print(hole,bend,self.noteIDToName(note))
		self.createClass()
	#
	#	Create a autogenerated class for the instrument.
	#							
	def createClass(self):
		h = open("/tmp/{0}.ts".format(self.getName().lower()),"w")
		info = self.getName()+"/"+str(self.getHoleCount())+"/"+("Y" if self.hasSlide() else "N")
		for note in self.noteDirectory.keys():
			ni = self.noteDirectory[note]
			info = info + "/"+str(ni["noteid"])+":"+("B" if ni["blow"] else "D")+":"+str(ni["hole"])
			info = info + ":"+("S" if ni["slide"] else "X")+":"+str(ni["bend"])
		#info = info.replace("/","\n")
		h.write("// Generated from compiler.\n\n")
		h.write("class instrument_{0} {{\n".format(self.getName().lower()))
		h.write("    public static information:string = ")
		h.write('"'+info+'";\n')
		h.write("}")
		return info
	#
	#	Get a setup to play a specific note by name
	#
	def findByName(self,name):
		name = name.lower()
		return self.noteDirectory[name] if name in self.noteDirectory else None
	#
	#	Get a setup to play a specific note by id
	#
	def findByNoteID(self,noteID):
		return self.findByName(Harmonica.noteIDToName(noteID))
	#
	#	Convert a given note ID to a name. C0 = 0
	#
	@staticmethod
	def noteIDToName(noteID):
		return Harmonica.noteNames[noteID % 12] + str(int(noteID/12))
	#
	#	Convert a name to a note ID. C0 = 0
	#
	@staticmethod
	def nameToNoteID(name):
		return int(name[-1],10) * 12 + Harmonica.noteIDs[name[:-1].lower()]

Harmonica.noteIDs = { "c":0,"c#":1,"d":2,"d#":3,"e":4,"f":5, \
		    	      "f#":6,"g":7,"g#":8,"a":9,"a#":10,"b":11 }

Harmonica.noteNames = [ "c","c#","d","d#","e","f","f#","g","g#","a","a#","b" ]
